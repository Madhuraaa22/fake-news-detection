# -*- coding: utf-8 -*-
"""fake_news_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L36a04hVrec2rH2LXUbaqB8d1VsqFx7P
"""

# Fake News Detection using Logistic Regression

# Step 1: Install Required Libraries
!pip install pandas scikit-learn

import pandas as pd
from pandas.errors import ParserError # Import ParserError
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Step 1: Load the Fake News Data
try:
    # Attempt to read with default parameters first
    fake_df = pd.read_csv('Fake.csv', on_bad_lines='skip')
except ParserError:
    # If default fails, try different parameters
    fake_df = pd.read_csv('Fake.csv', sep=',', quotechar='"', on_bad_lines='skip')


fake_df['label'] = 0  # Label 0 for Fake News

# Step 2: Create Real News Data (Manually for Demo)
real_data = {
    'text': [
        'Government launches new education policy',
        'NASA announces mission to Mars',
        'Vaccination drive expands across the country',
        'Economy shows signs of recovery post pandemic',
        'Scientists discover water on the Moon'
    ],
    'label': [1, 1, 1, 1, 1]  # Label 1 for Real News
}
real_df = pd.DataFrame(real_data)

# Step 3: Combine Fake and Real Data
# Taking only 'text' column and top 5 rows for balance, based on variable inspection
fake_df = fake_df[['text']].dropna().head(5)
fake_df['label'] = 0
df = pd.concat([fake_df, real_df], axis=0).reset_index(drop=True)

# Step 4: Split Data
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: TF-IDF Vectorization
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Step 6: Train Model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Step 7: Evaluate
y_pred = model.predict(X_test_vec)
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy:", round(accuracy * 100, 2), "%")

# Step 8: Predict on New Input
def predict_news(news_text):
    news_vec = vectorizer.transform([news_text])
    prediction = model.predict(news_vec)
    return 'Real News' if prediction[0] == 1 else 'Fake News'

# Step 9: Take User Input
user_input = input("\nEnter a news headline:\n")
print("Prediction:", predict_news(user_input))